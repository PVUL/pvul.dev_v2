.post {
  @apply flex flex-col xl:max-w-5xl mx-auto sm:p-12 my-12 max-w-4xl;

  .body {
    @apply p-2 sm:p-0;
  }

  /**
   * custom style overrides for mdx components
   */

  // for inline code without effecting code blocks
  p,
  ol {
    code {
      @apply p-1 px-1.5 rounded-[.25rem] text-teal-800 font-bold text-sm bg-gradient-to-br from-teal-200 to-green-200;
    }
  }

  // for [``]() inline code links
  a code {
    @apply underline;
  }

  // codeblock window aka code fence
  pre[class*='language-'] {
    @apply rounded-xl py-5 px-8 sm:py-9 sm:px-16 mt-5;
  }

  // sibling selector
  ol + pre[class*='language-'] {
    @apply mx-5;

    & + p {
      @apply mx-6;
    }
  }

  // codeblock main font size
  code[class*='language-'] {
    @apply text-base;
  }

  // images
  // make sure res from uploadcare is `1000x500`
  // {url}/-/scale_crop/1000x500/smart/
  p img {
    @apply sm:m-auto sm:rounded-lg md:max-w-2xl -ml-2 max-w-none w-screen sm:max-w-full pt-8 pb-2;
  }

  // fig caption, which optionally follows a blockquote, see BlockQuote.jsx
  figcaption {
    @apply sm:max-w-[40rem] text-right m-auto px-8 sm:px-14 -mt-9 mb-14;

    cite::before {
      content: ' ';
    }
  }

  ol {
    @apply mt-6;
    margin-left: 1.5rem;
    counter-reset: count;

    // this correlates with components/mdx/OrderedList
    // so that on ordered lists, a code fence does not
    // reset the count
    &[start] {
      counter-reset: count calc(var(--start) - 1);
    }

    li {
      @apply mb-3;
      counter-increment: count;
    }

    li:before {
      @apply font-bold italic mr-2;
      content: counter(count) '. ';
    }
  }

  h1 {
    @apply font-bold text-7xl;
  }

  h2 {
    @apply pt-10 pb-2 text-6xl font-bold;
  }

  h3 {
    @apply text-4xl font-bold;
  }

  h4 {
    @apply text-3xl font-bold;
  }

  h5 {
    @apply text-2xl font-bold;
  }

  h6 {
    @apply text-xl font-bold;
  }
}
